{"version":3,"sources":["webpack://mmir-plugin-speech-nuance-lang/./res/web-dist.ts","webpack://mmir-plugin-speech-nuance-lang/./src/langSupportUtils.ts","webpack://mmir-plugin-speech-nuance-lang/./src/languageSupport.ts","webpack://mmir-plugin-speech-nuance-lang/./src/languages.ts","webpack://mmir-plugin-speech-nuance-lang/webpack/bootstrap","webpack://mmir-plugin-speech-nuance-lang/webpack/startup"],"names":[],"mappings":"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","file":"languageSupport.js","sourcesContent":["\r\nimport * as languageSupport from '../src/languageSupport';\r\nimport * as languages from '../src/languages';\r\n\r\nexport {\r\n  languageSupport,\r\n  languages\r\n}\r\n","\r\n// import { asrLanguages as asrLanguageList , ttsLanguages as ttsLanguageList } from './languages';\r\nimport { VoiceDetails } from 'mmir-lib';\r\n\r\n/** transformation for raw data to gender string */\r\nexport type GenderParseFunc = (gender: string) => 'female' | 'male';\r\n// const genderType = {\r\n// \t'F': 'female',\t//map: list-entry -> type\r\n// \t'M': 'male',\t//map: list-entry -> type\r\n// \t'female': 'F',\t//map: type -> list-entry\r\n// \t'male': 'M'\t\t//map: type -> list-entry\r\n// }\r\n\r\nexport type Gender = \"female\" | \"male\";\r\nexport interface LabeledVoiceDetails extends VoiceDetails {\r\n  label: string;\r\n}\r\nexport interface VoiceResult {\r\n  voice: LabeledVoiceDetails;\r\n  language: string;\r\n  filter: string;\r\n}\r\n\r\n\r\n/**\r\n * normalize language code, optionally including separator & country-code:\r\n *  * language code to lower case\r\n *  * use '-' as separator\r\n *  * country code to upper case\r\n *\r\n * @param  {string} code [description]\r\n * @return {string} normalized language (and country) code\r\n */\r\nexport function normalizeCode(code: string): string {\r\n  return code.replace(/^([^_-]+)(-|_)?(\\w+)?$/, (_match, lang, sep, country) => {\r\n    return (lang? lang.toLowerCase() : '') + (sep? '-' : '') + (country? country.toUpperCase() : '');\r\n  });\r\n}\r\n\r\n/** metadata definition for how to access a data row/object for specific fields */\r\nexport interface LanguageSupportIndex {\r\n\r\n  // e.g. [0] Language, [1]\t6 char *, [2]\tVoice, [3]\tM / F\r\n\r\n  /** name/index for TTS (language) code field */\r\n  ttsCode: number|string;\r\n  /** name/index for TTS (voice) name field */\r\n  ttsName: number|string;\r\n  /** name/index for TTS (voice) gender field */\r\n  ttsGender: number|string;\r\n  /** name/index for (OPTIONAL) TTS (voice) label field */\r\n  ttsLabel?: number|string;\r\n  /** name/index for (OPTIONAL) TTS (voice) \"is locally available\" field */\r\n  ttsLocal?: number|string;\r\n\r\n  // e.g. [0] Language, [1]\t6 char *, [2]\tFrequency\r\n\r\n  /** name/index for ASR (language) label field */\r\n  asrLabel: number|string;\r\n  /** name/index for ASR (language) code field */\r\n  asrCode: number|string;\r\n}\r\n\r\nexport type LanguageResourceEntry = string[] | {[field: string]: string};\r\n\r\nexport class LanguageSupport {\r\n\r\n  /** name/index for TTS (language) code field */\r\n  ttsCode: number|string;\r\n  /** name/index for TTS (voice) name field */\r\n  ttsName: number|string;\r\n  /** name/index for TTS (voice) gender field */\r\n  ttsGender: number|string;\r\n  /** name/index for (OPTIONAL) TTS (voice) label field */\r\n  ttsLabel?: number|string;\r\n  /** name/index for (OPTIONAL) TTS (voice) \"is locally available\" field */\r\n  ttsLocal?: number|string;\r\n\r\n  /** name/index for ASR (language) label field */\r\n  asrLabel: number|string;\r\n  /** name/index for ASR (language) code field */\r\n  asrCode: number|string;\r\n\r\n  /**\r\n   * if TTS voices are locally (without network/internet) availabled:\r\n   * Can be set manually, to indicate local availibility for all voices.\r\n   *\r\n   * If `listIndices: LanguageSupportIndex`\r\n   *\r\n   * If unset (i.e. `undefined`), no information regarding local\r\n   * availability is available; it should be assumed, that network/internet resources\r\n   * may be required for the voice(s).\r\n   */\r\n  isLocal: boolean | undefined;\r\n\r\n  /**\r\n   * if TTS voices do have an additional information about local availability:\r\n   * detected during initialization, when `listIndices: LanguageSupportIndex`\r\n   * has a `ttsLocal` field.\r\n   */\r\n  readonly hasLocal: boolean;\r\n\r\n  /**\r\n   * if TTS voices do have an additional (human readable) name:\r\n   * detected during initialization, when `listIndices: LanguageSupportIndex`\r\n   * has a `ttsLabel` field.\r\n   */\r\n  readonly hasLabel: boolean;\r\n\r\n  /**\r\n   * transformation function for TTS voice name, used when querying for a voice;\r\n   * can be set via constructor.\r\n   *\r\n   * DEFAULT: use voice name as is (i.e. unchanged).\r\n   */\r\n  readonly voiceSelectFilter: (voiceName: string) => string;\r\n\r\n  constructor(\r\n    public asrLanguages: LanguageResourceEntry[],\r\n    public ttsLanguages: LanguageResourceEntry[],\r\n    public parseGender: GenderParseFunc,\r\n    listIndices: LanguageSupportIndex,\r\n    voiceSelectFilter?: (voiceName: string) => string\r\n  ){\r\n    this.hasLabel = false;\r\n    this.hasLocal = false;\r\n    for(const n in listIndices){\r\n      if(n === 'ttsLabel' && typeof listIndices[n] !== 'undefined'){\r\n        this.hasLabel = true;\r\n      }\r\n      if(n === 'ttsLocal' && typeof listIndices[n] !== 'undefined'){\r\n        this.hasLocal = true;\r\n      }\r\n      this[n] = listIndices[n];\r\n    }\r\n    this.voiceSelectFilter = voiceSelectFilter? voiceSelectFilter : (s: string) => s;\r\n  }\r\n\r\n  ttsProjection: {[type: string]: (entry: LanguageResourceEntry, index?: number, list?: LanguageResourceEntry[]) => string|LabeledVoiceDetails} = {\r\n    'code': (item: LanguageResourceEntry, _index: number, _list: LanguageResourceEntry[]): string => {\r\n      return item[this.ttsCode];\r\n    },\r\n    'label': (item: LanguageResourceEntry, _index: number, _list: LanguageResourceEntry[]): string => {\r\n      return item[this.ttsLabel];\r\n    },\r\n    'voice': (item: LanguageResourceEntry, _index: number, _list: LanguageResourceEntry[]): LabeledVoiceDetails => {\r\n      return {\r\n        name: item[this.ttsName],\r\n        label: this.hasLabel? item[this.ttsLabel] : item[this.ttsName],\r\n        language: item[this.ttsCode],\r\n        gender: this.parseGender( item[this.ttsGender] ),\r\n        local: this.hasLocal? item[this.ttsLocal] : this.isLocal\r\n      }\r\n    },\r\n    'voiceName': (item: LanguageResourceEntry, _index: number, _list: LanguageResourceEntry[]): string => {\r\n      return item[this.ttsName];\r\n    }\r\n  }\r\n\r\n  /** get list of supported TTS language codes */\r\n  getTTS(type: \"code\"): string[];\r\n  /** get list of supported TTS languages (i.e. language labels) */\r\n  getTTS(type: \"label\"): string[];\r\n  /** get list of supported TTS voice details (OPTIONAL: filter for language (code) and/or voice gender) */\r\n  getTTS(type: \"voice\", langCode?: string, gender?: Gender): LabeledVoiceDetails[];\r\n  /** get list of supported TTS voices (OPTIONAL: filter for language (code) and/or voice gender) */\r\n  getTTS(type: \"voiceName\", langCode?: string, gender?: Gender): string[];\r\n  /**\r\n   * query for TTS languages for voices\r\n   *\r\n   * @param type {\"code\" | \"label\" | \"voice\" | \"voiceName\"}\r\n   * \t\t\t\t\ttype of returned list: language code, language name, voice information, voice-name\r\n   * @param [langCode] {String} OPTIONAL\r\n   * \t\t\t\tif present for  \"voice\" or \"voiceName\", only voices with matching language code will be returned\r\n   * \t\t\t\tFormat: ISO3 language-code (lower-case) and optional ISO3 country-code (upper case), e.g. \"eng-USA\", \"spa_ESP\", \"deu\"\r\n   * @param [gender] {Gender} OPTIONAL\r\n   * \t\t\t\tif present for  \"voice\" or \"voiceName\", only voices with matching gender will be returned\r\n   *\r\n   * @returns {VoiceInfo} list of strings, depending on type parameter; in case of \"voice\" a list of voice-objects:\r\n   * \t\t\t\t{name: STRING, language: STRING, gender: Gender}\r\n   */\r\n  getTTS(type: \"code\" | \"label\" | \"voice\" | \"voiceName\", langCode?: string, gender?: Gender): (string | LabeledVoiceDetails)[] {\r\n\r\n    const isVoiceQuery = type === 'voice' || type === 'voiceName';\r\n    let list = isVoiceQuery? this.ttsLanguages : this.ttsLanguages.filter((item, index, array) => {\r\n      if(index === 0 || array[index - 1][this.ttsCode] !== item[this.ttsCode]){\r\n        return item;\r\n      }\r\n    });\r\n\r\n    if(langCode && isVoiceQuery){\r\n\r\n      //allow - and _ as separator:\r\n      const re = new RegExp('^' + normalizeCode(langCode) + '\\\\b');\r\n\r\n      list = list.filter(item => {\r\n        if(re.test(item[this.ttsCode])){\r\n          return !gender || gender === this.parseGender( item[this.ttsGender] )? true : false;\r\n        }\r\n      });\r\n    }\r\n    return list.map(this.ttsProjection[type]);\r\n  }\r\n\r\n  asrProjection: {[type: string]: (entry: LanguageResourceEntry, index?: number, list?: LanguageResourceEntry[]) => string}  = {\r\n    'code': (item: LanguageResourceEntry, _index: number, _list: LanguageResourceEntry[]): string => {\r\n      return item[this.asrCode];\r\n    },\r\n    'label': (item: LanguageResourceEntry, _index: number, _list: LanguageResourceEntry[]): string => {\r\n      return item[this.asrLabel];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * query for ASR language\r\n   *\r\n   * @param type \"code\" | \"label\"\r\n   * \t\t\t\t\ttype of returned list: language code, language name\r\n   *\r\n   * @returns {Array<string>} list of strings of language codes or names\r\n   */\r\n  getASR(type: \"code\" | \"label\"): string[] {\r\n    return this.asrLanguages.map(this.asrProjection[type]);\r\n  }\r\n\r\n  /**\r\n   * create sorting function for selecting a \"best\" voice:\r\n   *\r\n   *  1. if filter is given: prioritize voices that have the same gender as specified by the filter\r\n   *  2. voices that match the country-code of langCode (if langCode includes a country-code)\r\n   *  3. name of the voice\r\n   *\r\n   *  the first entry in the list will be the best match.\r\n   *\r\n   *  NOTE 1: the sorter assumes that the ISO3 language code is the same for all voices in the list.\r\n   *\r\n   *  NOTE 2: the sorter prioritizes gender (if specified) over country-code, so the selected voice may\r\n   *          have a different accent, if no voice with the specified gender exists for that country-code.\r\n   *\r\n   *  @param langCode {String}\r\n   *  \t\t\tan ISO3 language code (lower case), optionally with ISO3 country code (upper case)\r\n   *  @param [filter] {Gender} OPTIONAL\r\n   *  \t\t\tthe (preferred) gender for the voice\r\n   *\r\n   *  @returns {Function} a sorting function that can be used with Array.sort()\r\n   */\r\n  createBestVoiceSort(langCode: string, filter?: Gender): (v1: LabeledVoiceDetails, v2: LabeledVoiceDetails) => number {\r\n\r\n    langCode = normalizeCode(langCode);\r\n    var hasCountry = /^\\w+-\\w+$/.test(langCode);\r\n\r\n    return (v1, v2) => {\r\n\r\n      if(filter && v1.gender !== v2.gender){\r\n        if(v1.gender === filter){\r\n          return  -1;\r\n        } else if(v2.gender === filter){\r\n          return 1;\r\n        }\r\n      }\r\n\r\n      if(v1.language !== v2.language){\r\n\r\n        if(hasCountry){\r\n          if(v1.language === langCode){\r\n            return -1;\r\n          } else if(v2.language === langCode){\r\n            return 1;\r\n          }\r\n        }\r\n\r\n        return v1.language.localeCompare(v2.language);\r\n      }\r\n\r\n\r\n      if(v1.language !== v2.language){\r\n\r\n        if(hasCountry){\r\n          if(v1.language === langCode){\r\n            return -1;\r\n          } else if(v2.language === langCode){\r\n            return 1;\r\n          }\r\n        }\r\n\r\n        return v1.language.localeCompare(v2.language);\r\n      }\r\n\r\n      return v1.name.localeCompare(v2.name);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * if cached results for best voice / selected voice should be used:\r\n   * should be disabled, if underlying TTS voice list is created dynamically/changes.\r\n   *\r\n   * @default true\r\n   *\r\n   * @see getBestVoice\r\n   * @see ttsSelectVoiceFor\r\n   * @see resetVoiceQueryCache\r\n   */\r\n  public useVoiceQueryCache: boolean = true;\r\n\r\n  /**\r\n   * cached result of last invocation of getBestVoice()\r\n   *\r\n   * @type {voice: Voice, language: String, filter: String}\r\n   *\r\n   * @field voice {name: STRING, language: STRING, gender: Gender}\r\n   * \t\t\t\tthe voice that was selected, when getBestVoice() was (successfully) called last time\r\n   * @field language {String} the language code that was specified when selecting voice as \"best voice\":\r\n   *                          the ISO3 language code (lower case), optionally with ISO3 country code (upper case)\r\n   * @field [filter] {String} the filter/gender that was specified when selecting voice as \"best voice\":\r\n   *                          Gender\r\n   */\r\n  protected _lastBestVoice: VoiceResult = null;\r\n\r\n  /**\r\n   * cached result of last invocation of ttsSelectVoiceFor()\r\n   *\r\n   * @type {voice: Voice, language: String, filter: String}\r\n   *\r\n   * @field voice {name: STRING, language: STRING, gender: Gender}\r\n   * \t\t\t\tthe voice that was selected, when getBestVoice() was (successfully) called last time\r\n   * @field language {String} the language code that was specified when selecting voice as \"best voice\":\r\n   *                          the ISO3 language code (lower case), optionally with ISO3 country code (upper case)\r\n   * @field [filter] {String} the filter/gender that was specified when selecting voice as \"best voice\":\r\n   *                          Gender\r\n   */\r\n  protected _lastSelectedVoice: VoiceResult = null;\r\n\r\n  /**\r\n   * reset cached results for best matching voice and last selected voice\r\n   *\r\n   * @see useVoiceQueryCache\r\n   */\r\n  public resetVoiceQueryCache(): void {\r\n    this._lastBestVoice = null;\r\n    this._lastSelectedVoice = null;\r\n  }\r\n\r\n  /**\r\n   * get \"best\" matching voice for a language:\r\n   * will try to select a voice with the specified gender (if specified) and country-code (if specified).\r\n   *\r\n   * If no matching voice (for specified gender and/or country-code) can be found, a voice that matches\r\n   * the language-code will be returned.\r\n   *\r\n   * I.e. the function will always return a voice, as long as the language does have any voice; if the\r\n   * language is not supported, NULL is returned.\r\n   *\r\n   *\r\n   * NOTE: if gender and country-code are specified, the gender-specification is prioritized, i.e. the returned\r\n   *       voice may have a different country-code.\r\n   *\r\n   *  @param langCode {String}\r\n   *  \t\t\tan ISO3 language code (lower case), optionally with ISO3 country code (upper case)\r\n   *  @param [filter] {Gender} OPTIONAL\r\n   *  \t\t\tthe (preferred) gender for the voice\r\n   *\r\n   *  @returns {VoiceResult} the best matching voice as {voice: {name: STRING, language: STRING, gender: Gender}, language: <language param>, filter: <filter param>}\r\n   *           or NULL, if not voice could be found for that language\r\n   */\r\n  getBestVoice(langCode: string, gender?: Gender): VoiceResult {\r\n\r\n    //normalize FALSY values for gender query:\r\n    gender = gender || void(0);\r\n\r\n    if(this.useVoiceQueryCache && this._lastBestVoice && this._lastBestVoice.language === langCode && this._lastBestVoice.filter === gender){\r\n      // console.log('  ######## using cached _lastBestVoice ', _lastBestVoice);\r\n      return this._lastBestVoice;\r\n    }\r\n    // console.log('-----------------------------\\nno match for cached _lastBestVoice ', _lastBestVoice);\r\n\r\n    const langParts = langCode.split(/[-_]/);\r\n    const lang = langParts[0];\r\n\r\n    const list = this.getTTS('voice', lang) as LabeledVoiceDetails[];\r\n\r\n    if(this.useVoiceQueryCache && list.length > 0){\r\n      list.sort(this.createBestVoiceSort(langCode, gender));\r\n      this._lastBestVoice = {\r\n        voice: list[0],\r\n        language: langCode,\r\n        filter: gender\r\n      };\r\n      return this._lastBestVoice;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * select a voice by its name or by filter (gender) and language-code\r\n   *\r\n   * @param  {string} langCode the language-code (may include a country-code); NOTE if a voice-name matches, the langCode is ignored!\r\n   * @param  {string} query the voice name or filter-query; if FALSY the first matching voice for langCode will be used\r\n   * @return {Voice} the voice matching the query (may be a \"best match\", i.e. not exactly match the query)\r\n   */\r\n  ttsSelectVoiceFor(langCode: string, query?: Gender | string): LabeledVoiceDetails {\r\n\r\n    //normalize FALSY values for query & langCode:\r\n    query = query || void(0);\r\n    langCode = langCode || '';\r\n\r\n    if(this.useVoiceQueryCache && this._lastSelectedVoice && this._lastSelectedVoice.language === langCode && this._lastSelectedVoice.filter === query){\r\n      // console.log('  ######## using cached _lastSelectedVoice ', _lastSelectedVoice);\r\n      return this._lastSelectedVoice.voice;\r\n    }\r\n    // console.log('-----------------------------\\nno match for cached _lastSelectedVoice ', _lastSelectedVoice);\r\n\r\n    //1. try to get voice by name:\r\n    const re = new RegExp('^' + query + '$', 'i');\r\n    const voiceEntry = this.ttsLanguages.find((voiceData: string[]) => {\r\n      const name = voiceData[this.ttsName];\r\n      if(re.test(name) || re.test(this.voiceSelectFilter(name))){\r\n        return true;\r\n      }\r\n      return false;\r\n    });\r\n\r\n    let voice: LabeledVoiceDetails;\r\n    if(voiceEntry){\r\n      voice = this.ttsProjection.voice(voiceEntry) as LabeledVoiceDetails;\r\n    } else{\r\n      //2. get best matching voice for langCode & query\r\n      const bestMatch = this.getBestVoice(langCode, query as Gender);\r\n      if(bestMatch){\r\n        voice = bestMatch.voice;\r\n      }\r\n    }\r\n\r\n    if(this.useVoiceQueryCache && voice){\r\n      this._lastSelectedVoice = {\r\n        voice: voice,\r\n        language: langCode,\r\n        filter: query\r\n      };\r\n    }\r\n\r\n    return voice;\r\n  }\r\n}\r\n","\r\nimport { asrLanguages as asrLanguageList , ttsLanguages as ttsLanguageList } from './languages';\r\nimport { LanguageSupport, Gender, VoiceResult, LabeledVoiceDetails } from './langSupportUtils';\r\n\r\nexport { LanguageSupport, Gender, VoiceResult, LabeledVoiceDetails } from './langSupportUtils';\r\n\r\nconst genderType = {\r\n  'F': 'female',\t //map: list-entry -> type\r\n  'M': 'male',\t   //map: list-entry -> type\r\n};\r\n\r\nconst nuanceLangSupport = new LanguageSupport(\r\n  asrLanguageList,\r\n  ttsLanguageList,\r\n  function parseGender(gender: string): Gender {\r\n    return genderType[gender];\r\n  }, {\r\n    //[0] Language, [1]\t6 char *, [2]\tVoice, [3]\tM / F\r\n    ttsLabel: 0,\r\n    ttsCode: 1,\r\n    ttsName: 2,\r\n    ttsGender: 3,\r\n    //\t[0] Language, [1]\t6 char *, [2]\tFrequency\r\n    asrLabel: 0,\r\n    asrCode: 1\r\n  },\r\n  function selectVoiceFilter(voiceName: string): string {\r\n    // remove \"-ML\" suffix from voice name, if present, before matching with queried search string:\r\n    return voiceName.replace(/-ML$/, '');\r\n  }\r\n);\r\nnuanceLangSupport.isLocal = false;\r\n\r\nexport function ttsLanguages(): string[] { return nuanceLangSupport.getTTS('code') as string[];};\r\nexport function ttsVoices(langCode?: string, gender?: Gender): LabeledVoiceDetails[] { return nuanceLangSupport.getTTS('voice', langCode, gender) as LabeledVoiceDetails[];};\r\nexport function ttsVoiceNames(langCode?: string, gender?: Gender): string[] { return nuanceLangSupport.getTTS('voiceName', langCode, gender) as string[];};\r\nexport function ttsBestVoiceFor(langCode: string, gender?: Gender): VoiceResult { return nuanceLangSupport.getBestVoice(langCode, gender);};\r\nexport function asrLanguages(): string [] { return nuanceLangSupport.getASR('code');};\r\nexport function ttsSelectVoice(langCode: string, query?: Gender | string): LabeledVoiceDetails { return nuanceLangSupport.ttsSelectVoiceFor(langCode, query); };\r\n/** set \"local availability\" for all voices; DEFAULT false (i.e. network/internet access required for all voices) */\r\nexport function ttsVoicesLocal(allVoicesLocal: boolean | undefined): void { nuanceLangSupport.isLocal = allVoicesLocal; };","\r\n//from https://developer.nuance.com/public/index.php?task=supportedLanguages\r\n//state: 2019-01\r\n\r\n/**\r\n * [0] Language, [1]\t6 char *, [2]\tVoice, [3]\tM / F\r\n */\r\nconst ttsLanguages = [\r\n  //[0] Language, [1]\t6 char *, [2]\tVoice, [3]\tM / F\r\n  [\"Arabic\", \"ara-XWW\", \"Laila\", \"F\"],\r\n  [\"Arabic\", \"ara-XWW\", \"Maged\", \"M\"],\r\n  [\"Arabic\", \"ara-XWW\", \"Tarik\", \"M\"],\r\n  [\"Bahasa (Indonesia)\", \"ind-IDN\", \"Damayanti\", \"F\"],\r\n  [\"Basque\", \"baq-ESP\", \"Miren\", \"F\"],\r\n  [\"Cantonese\", \"yue-CHN\", \"Sin-Ji\", \"F\"],\r\n  [\"Catalan\", \"cat-ESP\", \"Jordi\", \"M\"],\r\n  [\"Catalan\", \"cat-ESP\", \"Montserrat\", \"F\"],\r\n  [\"Czech\", \"ces-CZE\", \"Iveta\", \"F\"],\r\n  [\"Czech\", \"ces-CZE\", \"Zuzana\", \"F\"],\r\n  [\"Danish\", \"dan-DNK\", \"Ida\", \"F\"],\r\n  [\"Danish\", \"dan-DNK\", \"Magnus\", \"M\"],\r\n  [\"Dutch\", \"nld-NLD\", \"Claire\", \"F\"],\r\n  [\"Dutch\", \"nld-NLD\", \"Xander\", \"M\"],\r\n  [\"Dutch (Belgium)\", \"nld-BEL\", \"Ellen\", \"F\"],\r\n  [\"English (Australia)\", \"eng-AUS\", \"Karen\", \"F\"],\r\n  [\"English (Australia)\", \"eng-AUS\", \"Lee\", \"M\"],\r\n  [\"English (GB)\", \"eng-GBR\", \"Kate\", \"F\"],\r\n  [\"English (GB)\", \"eng-GBR\", \"Serena\", \"F\"],\r\n  [\"English (GB)\", \"eng-GBR\", \"Daniel\", \"M\"],\r\n  [\"English (GB)\", \"eng-GBR\", \"Oliver\", \"M\"],\r\n  [\"English (India)\", \"eng-IND\", \"Veena\", \"F\"],\r\n  [\"English (Ireland)\", \"eng-IRL\", \"Moira\", \"F\"],\r\n  [\"English (Scotland)\", \"eng-SCT\", \"Fiona\", \"F\"],\r\n  [\"English (South Africa)\", \"eng-ZAF\", \"Tessa\", \"F\"],\r\n  [\"English (US)\", \"eng-USA\", \"Ava\", \"F\"],\r\n  [\"English (US)\", \"eng-USA\", \"Allison\", \"F\"],\r\n  [\"English (US)\", \"eng-USA\", \"Samantha\", \"F\"],\r\n  [\"English (US)\", \"eng-USA\", \"Susan\", \"F\"],\r\n  [\"English (US)\", \"eng-USA\", \"Zoe\", \"F\"],\r\n  [\"English (US)\", \"eng-USA\", \"Tom\", \"M\"],\r\n  [\"Finnish\", \"fin-FIN\", \"Satu\", \"F\"],\r\n  [\"French\", \"fra-FRA\", \"Audrey-ML\", \"F\"],\r\n  [\"French\", \"fra-FRA\", \"Thomas\", \"M\"],\r\n  [\"French\", \"fra-FRA\", \"Aurelie\", \"F\"],\r\n  [\"French (Canada)\", \"fra-CAN\", \"Amelie\", \"F\"],\r\n  [\"French (Canada)\", \"fra-CAN\", \"Chantal\", \"F\"],\r\n  [\"French (Canada)\", \"fra-CAN\", \"Nicolas\", \"M\"],\r\n  [\"Galician\", \"glg-ESP\", \"Carmela\", \"F\"],\r\n  [\"German\", \"deu-DEU\", \"Anna-ML\", \"F\"],\r\n  [\"German\", \"deu-DEU\", \"Petra-ML\", \"F\"],\r\n  [\"German\", \"deu-DEU\", \"Markus\", \"M\"],\r\n  [\"German\", \"deu-DEU\", \"Yannick\", \"M\"],\r\n  [\"Greek\", \"ell-GRC\", \"Melina\", \"F\"],\r\n  [\"Greek\", \"ell-GRC\", \"Nikos\", \"M\"],\r\n  [\"Hebrew\", \"heb-ISR\", \"Carmit\", \"F\"],\r\n  [\"Hindi\", \"hin-IND\", \"Lekha\", \"F\"],\r\n  [\"Hungarian\", \"hun-HUN\", \"Mariska\", \"F\"],\r\n  [\"Italian\", \"ita-ITA\", \"Alice-ML\", \"F\"],\r\n  [\"Italian\", \"ita-ITA\", \"Federica\", \"F\"],\r\n  [\"Italian\", \"ita-ITA\", \"Paola\", \"F\"],\r\n  [\"Italian\", \"ita-ITA\", \"Luca\", \"M\"],\r\n  [\"Japanese\", \"jpn-JPN\", \"Kyoko\", \"F\"],\r\n  [\"Japanese\", \"jpn-JPN\", \"Otoya\", \"M\"],\r\n  [\"Korean\", \"kor-KOR\", \"Sora\", \"F\"],\r\n  [\"Mandarin (China)\", \"cmn-CHN\", \"Tian-Tian\", \"F\"],\r\n  [\"Mandarin (Taiwan)\", \"cmn-TWN\", \"Mei-Jia\", \"F\"],\r\n  [\"Norwegian\", \"nor-NOR\", \"Nora\", \"F\"],\r\n  [\"Norwegian\", \"nor-NOR\", \"Henrik\", \"M\"],\r\n  [\"Polish\", \"pol-POL\", \"Ewa\", \"F\"],\r\n  [\"Polish\", \"pol-POL\", \"Zosia\", \"F\"],\r\n  [\"Portuguese (Brazil)\", \"por-BRA\", \"Luciana\", \"F\"],\r\n  [\"Portuguese (Brazil)\", \"por-BRA\", \"Felipe\", \"M\"],\r\n  [\"Portuguese (Portugal)\", \"por-PRT\", \"Catarina\", \"F\"],\r\n  [\"Portuguese (Portugal)\", \"por-PRT\", \"Joana\", \"F\"],\r\n  [\"Romanian\", \"ron-ROU\", \"Ioana\", \"F\"],\r\n  [\"Russian\", \"rus-RUS\", \"Katya\", \"F\"],\r\n  [\"Russian\", \"rus-RUS\", \"Milena\", \"F\"],\r\n  [\"Russian\", \"rus-RUS\", \"Yuri\", \"M\"],\r\n  [\"Slovak\", \"slk-SVK\", \"Laura\", \"F\"],\r\n  [\"Spanish (Castilian)\", \"spa-ESP\", \"Monica\", \"F\"],\r\n  [\"Spanish (Castilian)\", \"spa-ESP\", \"Jorge\", \"M\"],\r\n  [\"Spanish (Columbia)\", \"spa-COL\", \"Soledad\", \"F\"],\r\n  [\"Spanish (Columbia)\", \"spa-COL\", \"Carlos\", \"M\"],\r\n  [\"Spanish (Mexico)\", \"spa-MEX\", \"Angelica\", \"F\"],\r\n  [\"Spanish (Mexico)\", \"spa-MEX\", \"Paulina\", \"F\"],\r\n  [\"Spanish (Mexico)\", \"spa-MEX\", \"Juan\", \"M\"],\r\n  [\"Swedish\", \"swe-SWE\", \"Alva\", \"F\"],\r\n  [\"Swedish\", \"swe-SWE\", \"Oskar\", \"M\"],\r\n  [\"Thai\", \"tha-THA\", \"Kanya\", \"F\"],\r\n  [\"Turkish\", \"tur-TUR\", \"Cem\", \"M\"],\r\n  [\"Turkish\", \"tur-TUR\", \"Yelda\", \"F\"],\r\n  [\"Valencian\", \"spa-ESP\", \"Empar\", \"F\"]\r\n];\r\n\r\n/**\r\n * [0] Language, [1]\t6 char *, [2]\tFrequency\r\n */\r\nconst asrLanguages = [\r\n  //\t[0] Language, [1]\t6 char *, [2]\tFrequency\r\n  [\"Arabic (Egypt)\", \"ara-EGY\", \"8 kHz, 16 kHz\"],\r\n  [\"Arabic (Saudi Arabia)\", \"ara-SAU\", \"8 kHz, 16 kHz\"],\r\n  [\"Arabic (International)\", \"ara-XWW\", \"8 kHz, 16 kHz\"],\r\n  [\"Bahasa (Indonesia)\", \"ind-IDN\", \"8 kHz, 16 kHz\"],\r\n  [\"Cantonese (Simplified)\", \"yue-CHN\", \"8 kHz, 16 kHz\"],\r\n  [\"Catalan\", \"cat-ESP\", \"8 kHz, 16 kHz\"],\r\n  [\"Croatian \", \"hrv-HRV\", \"8 kHz, 16 kHz\"],\r\n  [\"Czech\", \"ces-CZE\", \"8 kHz, 16 kHz\"],\r\n  [\"Danish\", \"dan-DNK\", \"8 kHz, 16 kHz\"],\r\n  [\"Dutch\", \"nld-NLD\", \"8 kHz, 16 kHz\"],\r\n  [\"English (Australia)*\", \"eng-AUS\", \"8 kHz, 16 kHz\"],\r\n  [\"English (GB)*\", \"eng-GBR\", \"8 kHz, 16 kHz\"],\r\n  [\"English (US)*\", \"eng-USA\", \"8 kHz, 16 kHz\"],\r\n  [\"English (India) \", \"eng-IND\", \"8 kHz, 16 kHz\"],\r\n  [\"Finnish\", \"fin-FIN\", \"8 kHz, 16 kHz\"],\r\n  [\"French (Canada)\", \"fra-CAN\", \"8 kHz, 16 kHz\"],\r\n  [\"French (France)*\", \"fra-FRA\", \"8 kHz, 16 kHz\"],\r\n  [\"German*\", \"deu-DEU\", \"8 kHz, 16 kHz\"],\r\n  [\"Greek\", \"ell-GRC\", \"8 kHz, 16 kHz\"],\r\n  [\"Hebrew\", \"heb-ISR\", \"8 kHz, 16 kHz\"],\r\n  [\"Hindi\", \"hin-IND\", \"8 kHz, 16 kHz\"],\r\n  [\"Hungarian\", \"hun-HUN\", \"8 kHz, 16 kHz\"],\r\n  [\"Italian\", \"ita-ITA\", \"8 kHz, 16 kHz\"],\r\n  [\"Japanese\", \"jpn-JPN\", \"8 kHz, 16 kHz\"],\r\n  [\"Korean\", \"kor-KOR\", \"8 kHz, 16 kHz\"],\r\n  [\"Malay\", \"zlm-MYS\", \"8 kHz, 16 kHz\"],\r\n  [\"Mandarin (China/Simplified)\", \"cmn-CHN\", \"8 kHz, 16 kHz\"],\r\n  [\"Mandarin (Taiwan/Traditional)\", \"cmn-TWN\", \"8 kHz, 16 kHz\"],\r\n  [\"Norwegian\", \"nor-NOR\", \"8 kHz, 16 kHz\"],\r\n  [\"Polish\", \"pol-POL\", \"8 kHz, 16 kHz\"],\r\n  [\"Portuguese (Brazil)\", \"por-BRA\", \"8 kHz, 16 kHz\"],\r\n  [\"Portuguese (Portugal)\", \"por-PRT\", \"8 kHz, 16 kHz\"],\r\n  [\"Romanian\", \"ron-ROU\", \"8 kHz, 16 kHz\"],\r\n  [\"Russian\", \"rus-RUS\", \"8 kHz, 16 kHz\"],\r\n  [\"Slovak\", \"slk-SVK\", \"8 kHz, 16 kHz\"],\r\n  [\"Spanish (Spain)\", \"spa-ESP\", \"8 kHz, 16 kHz\"],\r\n  [\"Spanish (LatAm)\", \"spa-XLA\", \"8 kHz, 16 kHz\"],\r\n  [\"Swedish\", \"swe-SWE\", \"8 kHz, 16 kHz\"],\r\n  [\"Thai\", \"tha-THA\", \"8 kHz, 16 kHz\"],\r\n  [\"Turkish\", \"tur-TUR\", \"8 kHz, 16 kHz\"],\r\n  [\"Ukrainian\", \"ukr-UKR\", \"8 kHz, 16 kHz\"],\r\n  [\"Vietnamese\", \"vie-VNM\", \"8 kHz, 16 kHz\"]\r\n];\r\n\r\n\r\nexport {\r\n  /**\r\n   * ASR languages:\r\n   * list of arrays, where an array in the list contains\r\n   * <pre>\r\n   * [0] Language, [1]\t6 char *, [2]\tFrequency\r\n   * </pre>\r\n   * @type Array<Array<string>>\r\n   */\r\n  asrLanguages,\r\n    /**\r\n     * TTS languages & voices:\r\n     * list of arrays, where an array in the list contains\r\n     * <pre>\r\n     * [0] Language, [1]\t6 char *, [2]\tVoice, [3]\tM / F\r\n     * </pre>\r\n     * @type Array<Array<string>>\r\n     */\r\n  ttsLanguages\r\n};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(\"./res/web-dist.ts\");\n"],"sourceRoot":""}